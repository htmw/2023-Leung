# -*- coding: utf-8 -*-
"""Image Classification- ResNet50- Github.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11qL4suFl5aObzouRFTHdCigYC0kljk-w
"""

import tensorflow as tf
import os
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dense
from tensorflow.keras.callbacks import ReduceLROnPlateau

data_dir = '/content/drive/MyDrive/CS/CS691-692/data' 
input_shape = (256, 256, 3)
lr = 1e-5
epochs = 50
batch_size = 64

# Remove dodgy images
import cv2
import imghdr

image_exts = ['jpeg', 'jpg', 'bmp', 'png']

# making sure image exists in image directory
for image_class in os.listdir(data_dir): 
    for image in os.listdir(os.path.join(data_dir, image_class)):
        image_path = os.path.join(data_dir, image_class, image)
        try: 
            img = cv2.imread(image_path)
            tip = imghdr.what(image_path)
            if tip not in image_exts: 
                print('Image not in ext list {}'.format(image_path))
                os.remove(image_path)
        except Exception as e: 
            print('Issue with image {}'.format(image_path))
            # os.remove(image_path)

# Load data
data = tf.keras.utils.image_dataset_from_directory(data_dir, image_size=input_shape[:2], batch_size=batch_size)
data = data.map(lambda x, y: (x/255, y))

# Split data
train_size = int(len(data)*.7)
val_size = int(len(data)*.2)
test_size = int(len(data)*.1)

train = data.take(train_size)
val = data.skip(train_size).take(val_size)
test = data.skip(train_size+val_size).take(test_size)

# Build ResNet50 model
base_model = tf.keras.applications.ResNet50(include_top=False, weights='imagenet', input_shape=input_shape)

# Add a new classification layer on top
x = base_model.output
x = tf.keras.layers.GlobalAveragePooling2D()(x)
x = Dense(1024, activation='relu')(x)
predictions = Dense(1, activation='sigmoid')(x)

# Create a new model
model = Model(inputs=base_model.input, outputs=predictions)

# Freeze the base ResNet50 layers
for layer in base_model.layers:
    layer.trainable = False

# Set a learning rate annealer
learning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy', 
                                            patience=5, 
                                            verbose=1, 
                                            factor=0.5, 
                                            min_lr=1e-7)

model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

# Train model
history = model.fit(train, 
                    epochs=50,
                    validation_data=val,
                    callbacks=[learning_rate_reduction])

# Plot accuracy and loss
import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label='val_accuracy')
plt.plot(history.history['loss'], label='loss')
plt.plot(history.history['val_loss'], label='val_loss')
plt.legend()
plt.show()

# Evaluate model
model.evaluate(test)

"""#Test"""

import cv2

img = cv2.imread('/content/drive/MyDrive/CS/CS691-692/Melanoma.jpg')
plt.imshow(img)
plt.show()

resize = tf.image.resize(img, (256,256))
plt.imshow(resize.numpy().astype(int))
plt.show()

test = plt.imshow(resize.numpy().astype(int))

import numpy as np
#y prediction
yhat = model.predict(np.expand_dims(resize/255, 0))

yhat

"""#Save the model"""

from tensorflow.keras.models import load_model

model.save(os.path.join('/content/drive/MyDrive/CS/CS691-692/models','imageclassifier-resnet50.h5'))